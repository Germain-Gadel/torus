#!/usr/bin/python3

import sys, math

if (len(sys.argv) != 8):
    print("USAGE\n\t./105torus opt a0 a1 a2 a3 a4 n\n\nDESCRIPTION\n\topt\tmethod option:\n\t\t\t1 for the bisection method\n\t\t\t2 for Newton's method\n\t\t\t3 for secant method\n\ta[0-4]\tcoefficients of the equation\n\tn\tprecision (the application of the polynomial to the solution should\n\t\tbe smaller than 10^-n)")
    exit(84)

def check_argv(nb):
    while True:
        try:
            a = int(sys.argv[nb])
        except ValueError:
            exit(84)
        else:
            return (a)
            break

option = check_argv(1)
a0 = check_argv(2)
a1 = check_argv(3)
a2 = check_argv(4)
a3 = check_argv(5)
a4 = check_argv(6)
n = check_argv(7)
check = 0
state = 0
if (n == 0):
    exit(84)
if (option == 1):
    x = 0.5
    end = 1
    origin = 0
    mid = 0.5
    i = 0
    str_x = "0.5"
    p = 0
    
    print("x = 0.5")

    while (state == 0 and i < 100):
        str_x1 = str_x
        ymid = (a4 * (x ** 4)) + (a3 * (x ** 3)) + (a2 * (x ** 2)) + (a1 * (x ** 1)) + a0
        if (ymid < 0):
            origin = mid
            mid = ((end - mid) / 2) + mid
        elif (ymid > 0):
            end = mid
            mid = ((mid - origin) / 2) + origin
        i += 1
        x = mid

        str_x = "{:.{}f}".format(x, n)
        if (str_x == str_x1):
            state = 1
        else:
            if (str_x[n + 1] == '0' and check == 0):
                print("x = %s" % str(round(x, n)))
            else:
                check = 1
                print("x = %s" % str_x)

elif (option == 2):
    x0 = 0.5
    i = 0
    str_x = str(x0)
    print("x = 0.5")
    
    while (state == 0 and i < 100):
        str_x1 = str_x
        x1 = x0 - ((a4 * (x0 ** 4)) + (a3 * (x0 ** 3)) + (a2 * (x0 ** 2)) + (a1 * (x0 ** 1)) + a0) / (( 4 * a4 * (x0 **3)) + (3 * a3 * (x0 ** 2)) + (2 * a2 * x0) + (a1))
        x0 = x1
        i += 1
        str_x = "{:.{}f}".format(x0, n)
        if (str_x == str_x1):
            state = 1
        else:
            if (str_x[n + 1] == '0' and check == 0):
                print("x = %s" % str(round(x0, n)))
            else:
                check = 1
                print("x = %s" % str_x)
elif (option == 3):
    x1 = 0
    x2 = 1
    i = 0
    str_x = str(x1)

    while (state == 0 and i < 100):
        str_x1 = str_x
        func_x1 = ((a4 * (x1 ** 4)) + (a3 * (x1 ** 3)) + (a2 * (x1 ** 2)) + (a1 * (x1 ** 1)) + a0)
        func_x2 = ((a4 * (x2 ** 4)) + (a3 * (x2 ** 3)) + (a2 * (x2 ** 2)) + (a1 * (x2 ** 1)) + a0)

        x3 = x2 - (x2-x1)*func_x2/(func_x2-func_x1)
        func_x3 = ((a4 * (x3 ** 4)) + (a3 * (x3 ** 3)) + (a2 * (x3 ** 2)) + (a1 * (x3 ** 1)) + a0)
        x1 = x2
        func_x1 = func_x2
        x2 = x3
        func_x2 = func_x3

        if (i == 0):
            print("x = %s" % str(round(x3, n)))
        str_x = "{:.{}f}".format(x2, n)
        if (str_x == str_x1):
            state = 1
        else:
            if(i >= 1):
                if (str_x[n + 1] == '0' and check == 0):
                    print("x = %s" % str(round(x2, n)))
                else:
                    check = 1
                    print("x = %s" % str_x)
        i += 1
else :
    print("USAGE\n\t./105torus opt a0 a1 a2 a3 a4 n\n\nDESCRIPTION\n\topt\tmethod option:\n\t\t\t1 for the bisection method\n\t\t\t2 for Newton's method\n\t\t\t3 for secant method\n\ta[0-4]\tcoefficients of the equation\n\tn\tprecision (the application of the polynomial to the solution should\n\t\tbe smaller than 10^-n)")
    exit(84)

